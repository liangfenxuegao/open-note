<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan：为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug：为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!--定义日志的根目录，当使用相对路径时文件生成在项目下，当使用绝对路径且不带盘符时生成到项目所在磁盘，带盘符则生成到指定磁盘的指定路径。-->
    <property name="LOG_HOME" value="log"/>
    <!-- 定义日志文件名称 -->
    <property name="appName" value="xuegao-practice-openNote"/>
    <!-- ch.qos.logback.core.ConsoleAppender表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--
            日志输出格式：%d日期，%thread线程名，%-5level级别从左显示5个字符宽度，
            %logger{50} 表示logger名最多50个字符，否则用句点分割。%msg日志消息，%n换行符。
        -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!--
            为配置文件添加-spring的扩展名后，就能使用SpringBoot提供的高级Profile功能，使配置只在某环境生效
                <springProfile name="development">
                    <pattern>开发环境： %d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                </springProfile>
                <springProfile name="!development">
                    <pattern>非开发环境： %d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
                </springProfile>
            -->
        </layout>
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <appender name="appLogAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${appName}.log</file>
        <!--
        当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
        TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->
            <fileNamePattern>${LOG_HOME}/${appName}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>365</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动。
            注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy。
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出格式： -->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>
        </layout>
    </appender>

    <!--
		logger主要用于存放日志对象，也可以定义日志类型、级别。
		属性解释：
            name：表示匹配的logger类型前缀，也就是包的前半部分
            level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
            additivity：
                作用在于children-logger是否使用root logger配置的appender进行输出，
                false：表示只用当前logger的appender-ref。true：表示当前logger的appender-ref和root logger的appender-ref都有效。
    -->
    <!-- 设置xuegao.practice.openNote下的日志级别为DEBUG -->
    <logger name="xuegao.practice.openNote" level="debug"/>
    <!--设置MyBatis的日志级别为DEBUG-->
    <logger name="org.apache.ibatis" level="debug"/>
    <!--设置Spring framework logger的日志级别为DEBUG -->
    <logger name="org.springframework" level="debug" additivity="false"/>

    <!-- 
        root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
        要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <!--设置整个项目的默认日志级别为info-->
    <root level="info">
        <appender-ref ref="stdout"/>
        <appender-ref ref="appLogAppender"/>
    </root>
</configuration> 