<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="xuegao.practice.openNote.dao.UserMapper"><!-- 当使用接口获取映射方法时，命名空间不能随便取，要指定为接口的全类名 -->
	<!--启用MyBatis自带的二级缓存。eviction：缓存回收策略；flushInterval：刷新间隔，单位毫秒；readOnly：只读，true/false；size：引用数目，大太容易导致内存溢出。-->
	<!--<cache eviction="LRU" flushInterval="600000" readOnly="false" size="1024"/>-->

	<!--通过用户名得到id-->
	<select id="getIdByUsername" resultType="integer">
		SELECT id FROM user WHERE username = #{username}
	</select>

	<!--通过用户名查询邮箱号。string是MyBatis内置的String类型别名-->
	<select id="getMailByUsername" resultType="string">
		SELECT email FROM open_note.user WHERE username = #{username} OR email = #{username}
	</select>

	<!--检查该用户是否存在，提供昵称或邮箱均可。另外这里将count(*)取别名为username了。count(*)用于统计查询到几条数据。_byte是MyBatis内置的byte类型别名-->
	<select id="checkIfTheUserExists" resultType="_byte">
		SELECT count(*) username FROM open_note.user WHERE username = #{username} OR email = #{username}
	</select>

    <select id="getUserByUsername" resultType="xuegao.practice.openNote.entity.User">
		SELECT * FROM open_note.user WHERE username = #{username} OR email = #{username}
	</select>

	<!--通过用户名得到用户和地区信息（注意出于性能和实用性，本方法的联级并没有获取全部的属性值，主要获取了中文版的地区信息）-->
	<resultMap id="userAndRegionMap" type="xuegao.practice.openNote.dto.UserDto">
		<id column="id" property="id"/><!--用id标签指定主键，MyBaits底层会有优化。-->
		<result column="username" property="username"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<result column="password" property="password"/>
		<result column="phone_number" property="phoneNumber"/>
		<result column="surname" property="surname"/>
		<result column="first_name" property="firstName"/>
		<result column="address" property="address"/>
		<result column="city_id" property="cityId"/>
		<!--
			使用分步查询得到city。column：将指定列的值传入该方法。select：指定该属性使用的查询方法。
			fetchType可以灵活的设置查询是否需要使用延迟加载，而不受全局配置影响。
		-->
		<association column="city_id" property="cityDto" select="xuegao.practice.openNote.dao.CityMapper.getCityCnByCityId" fetchType="eager"/>
	</resultMap>
	<select id="getUserAndRegionByUsername" resultMap="userAndRegionMap">
		SELECT * FROM open_note.user WHERE username = #{username} OR email = #{username}
	</select>

	<!--通过用户名得到用户信息及其所拥有的角色（使用分步查询）-->
	<resultMap id="userAndRoleMap" type="xuegao.practice.openNote.dto.UserDto">
		<id column="id" property="id"/><!--用id标签指定主键，MyBaits底层会有优化。-->
		<result column="username" property="username"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<result column="password" property="password"/>
		<result column="phone_number" property="phoneNumber"/>
		<result column="surname" property="surname"/>
		<result column="first_name" property="firstName"/>
		<result column="address" property="address"/>
		<result column="city_id" property="cityId"/>
		<!--使用分步查询得到roleSet。column：将指定列的值传入该方法。select：指定该属性使用的查询方法。-->
		<collection column="id" property="roleSet" select="xuegao.practice.openNote.dao.UserRoleRelationMapper.getRoleSetByUserId"/>
	</resultMap>
	<select id="getUserAndRoleByUsername" resultMap="userAndRoleMap">
		SELECT * FROM open_note.user WHERE username = #{username} OR email = #{username}
	</select>

	<!--
	数据库中user的id字段被设置为自增的，所以无需提供id。
		useGeneratedKeys：令MyBatis使用JDBC的getGeneratedKeys方法取出由数据库内部生成的主键，如MySQL和SQL Server这样的关系数据库管理系统的自动递增字段，默认值false。
		keyProperty：MyBatis获取到主键值后，将值封装给该属性指定的JavaBean属性。
		useGeneratedKeys和keyProperty只适用于insert和update标签。
	-->
	<insert id="addUser" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO open_note.user(username, email, gender, password)
		VALUES (#{username}, #{email}, #{gender}, #{password})
	</insert>

	<!--更新用户信息-->
	<update id="updateUserByUsernameAndUser">
		UPDATE user
		SET username = #{user.username},gender = #{user.gender},phone_number = #{user.phoneNumber},surname = #{user.surname},first_name = #{user.firstName},address = #{user.address},city_id = #{user.cityId}
		WHERE username = #{currentUsername}
	</update>

	<!--更新指定用户的密码-->
	<update id="updatePassword">
		UPDATE open_note.user SET password = #{newPassword} WHERE username = #{username}
	</update>
</mapper>
