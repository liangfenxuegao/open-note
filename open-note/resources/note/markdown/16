# 理论

## 变量

### 变量作用域

变量可以放在方法内或者外边，两者的区别只在于作用域和生存周期。另外main函数是一个进程的入口，此外，和别的函数无区别。

1. main函数里定义的是局部变量,只是在main函数里有效。
2. 如果程序里有多个函数，定义的全局变量在这些函数里都可以使用，而在main中定义的只能在main中使用，其他函数不可以直接调用。
3. 题目中的两个程序的区别只在于程序一的a和s变量是全局变量，程序二的a和s变量是局部变量。
4. 全局变量是程序的各个函数都可以调用的，而局部变量只在函数内部有效。

## 方法

### 隐式声明告警

有时候可能会遇到warning: implicit declaration of function 'xxx'，xxx指任意函数名。这是因为没有为该函数写申明，一般需要写到头文件中，即.h文件。

## 数据结构

### 结构体（struct）

在C语言中，结构体(struct)指的是一种数据结构，是C语言中聚合数据类型(aggregate data type)的一类。结构体可以被声明为变量、指针或数组等，用以实现较复杂的数据结构。结构体同时也是一些元素的集合，这些元素称为结构体的成员(member)，且这些成员可以为不同的类型，成员一般用名字访问。

定义与声明：

- 结构体的定义如下所示，struct为结构体关键字，tag为结构体的标志，member-list为结构体成员列表，其必须列出其所有成员；variable-list为此结构体声明的变量。

# 流程控制

## 判断

### 三元运算符

例如 C =  A<B?1:2，意思是若A小于B，则C等于1，否则等于2。

## 循环

### continue

用于循环体中，当执行到continue语句时，将跳过本次循环，执行下一次循环，常与if配合使用。

### break

用于循环体中，当执行到beak语句时，将终止循环，执行循环体之后的语句。

# 指针

## 运算符

### *

\*符用于变量前时，用于定义指针变量，即指向内存单元的指针，需要被赋值一个地址。也可以放在类型后，例如char\* a，效果等同于char *a。

在函数前面表示这个函数返回指针类型。

### &

&符用于取址。

例如有变量 a = 10。**变量a 本质上代表一个存储单元**。CPU通过该存储单元的地址访问该存储单元中的数据。所以**a本来代表两个值：存储单元的地址和储单元中的数据。**于是就有了二异性。为了消除这种二义性，C语言规定a表示存储单元中的数据，&a表示存储单元的地址。 
 a存储单元中的数据可以是一个普通数值，也可以是另一个存储单元的地址，比如：a = &b;  语句就是将b的存储单元的地址存入a存储单元中。C语言规定\*a代表a中存储的地址对应的存储单元中的数据，也就是访问\*a就等于访问b，于是*a提供了通过a访问b中的数据的手段。

### ->

“->”是一个整体，它是用于指向结构体子数据的指针，用来取子数据。换种说法，如果专我们在C语言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到“->”。

例如 p = p->next，意思是将p指向的一个结构体实例中的自数据next赋值给p。

# 函数

## 长度

### sizeof

可以得到入参的长度。

可以用sizeof来获取数组的内的元素个数，例如有数组int A[] = {2,3,5643,56,56,3,45,57,5,78}，则int number = sizeof(A)/sizeof(int)。

## 内存相关

### malloc

动态分配内存。（C++中用new）

## 进程

### exit

exit()结束当前进程，在整个程序中，只要调用 exit ，就结束。退出进程前会作两个动作：一是调用催出处理函数，二是清理I/O缓存。**注意_exit()将不会执行上述的两个动作。**

\_exit()函数：直接使进程停止运行,清除其使用的内存空间,并销毁其在内核中的各种数据结构。

exit()函数与\_exit()函数最大的区别就在于 exit()函数在调用 exit 系统调用之前要检查文件的打开情况,把文件缓冲区中的内容写回文件。

exit(0)表示正常退出。exit(1)表示异常退出，这个1会返回给操作系统。exit(x)，x为任意不等于0的数都表示异常退出。

# C++

## 运算符

### ->

-> 在c++中为取成员运算符。

对象指针/结构指针->成员变量/成员函数。

该运算符的作用：取得指针所指向的类对象或结构变量的成员变量的值，或者调用其成员函数。 

## 修饰符

### const

**const** 是**constant**的缩写，本意是**不变的，不易改变**的意思。

**const** 在C++中是用来修饰**内置类型变量，自定义对象，成员函数，返回值，函数参数**。

const修饰普通类型的变量，该变量变为常量，不可被修改。

## 函数

### 虚函数

虚函数定义的一般语法形式如下：virtual 函数类型 函数名 (形参表){函数体;}。

纯虚函数的定义：virtual 函数名 = 0。当本类中没有虚函数的具体实现（即没有函数体），则应当使用纯虚函数。

更为常见的纯虚函数形态为：virtual 函数类型 函数名() = 0。

### 在类外定义函数体

在类外定义函数体的格式：返回值类型 类名 :: 成员函数名 (形参表){函数体;}。

::是类的作用域分辨符，用在此处，放在类名后，成员函数前，表命后面的成员函数属于前面的那个类。