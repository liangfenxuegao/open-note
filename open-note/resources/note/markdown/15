# Jackson

参考文章：https://blog.csdn.net/u011054333/article/details/80504154/ 。

Java生态圈中有很多处理JSON和XML格式化的类库，Jackson是其中比较著名的一个。虽然JDK自带了XML处理类库，但是相对来说比较低级，使用本文介绍的Jackson等高级类库处理起来会方便很多。

## 注解

**属性命名：**

- @JasonProperty：指定一个属性用于JSON映射，默认情况下映射的JSON属性与注解的属性名称相同，不过可以使用该注解的`value`值修改JSON属性名，该注解还有一个`index`属性指定生成JSON属性的顺序，如果有必要的话。

**属性包含：**

还有一些注解可以管理在映射JSON的时候包含或排除某些属性，下面介绍一下常用的几个。

- @JsonIgnore：注解用于排除某个属性，这样该属性就不会被Jackson序列化和反序列化。亦可忽略方法。参考文章：https://blog.csdn.net/wwwcomy/article/details/84910941 。
- @JsonIgnoreProperties：注解是类注解。在序列化为JSON的时候。
- @JsonIgnoreProperties({"prop1","prop2"})：会忽略pro1和pro2两个属性。在从JSON反序列化为Java类的时候，`@JsonIgnoreProperties(ignoreUnknown=true)`会忽略所有没有Getter和Setter的属性。该注解在Java类和JSON不完全匹配的时候很有用。
- @JsonIgnoreType也是类注解，会排除所有指定类型的属性。

**序列化相关：**

- `@JsonPropertyOrder`和`@JsonProperty`的`index`属性类似，指定属性序列化时的顺序。
- `@JsonRootName`注解用于指定JSON根属性的名称。

**日期：**

参考文章：https://bigsai.blog.csdn.net/article/details/89554146 。

@JsonFormat：

- Jackson的日期格式化注解，能在序列化为JSON时自动格式化。

- 使用例子如下，在变量上使用注解即可，pattern是用于自定义格式的：

  - ```java
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date date;//笔记的最后编辑日期
    ```

## 处理JSON

**简单映射：**

用Lombok设置个简单的Java类。

```java
@Data
@AllArgsConstructor
@NoArgsConstructor
public class Friend {
    private String nickname;
    private int age;
}
```

然后就可以处理JSON数据了。需要ObjectMapper对象，序列化和反序列化都需要。

```java
ObjectMapper mapper = new ObjectMapper();
Friend friend = new Friend("yitian", 25);

String text = mapper.writeValueAsString(friend);//写为字符串
mapper.writeValue(new File("friend.json"), friend);//写为文件
byte[] bytes = mapper.writeValueAsBytes(friend);//写为字节流

System.out.println(text);

Friend newFriend = mapper.readValue(text, Friend.class);//从字符串中读取
newFriend = mapper.readValue(bytes, Friend.class);//从字节流中读取
newFriend = mapper.readValue(new File("friend.json"), Friend.class);//从文件中读取

System.out.println(newFriend);
```

程序运行结果如下。可以看到生成的JSON属性和Java类中定义的一致。

```
{"nickname":"yitian","age":25}
Friend(nickname=yitian, age=25)
```

**映射集合：**

除了使用Java类进行映射之外，我们还可以直接使用Map和List等Java集合组织JSON数据，在需要的时候可以使用readTree方法直接读取JSON中的某个属性值。需要注意的是从JSON转换为Map对象的时候，由于Java的类型擦除，所以类型需要我们手动用`new TypeReference`给出。

```java
ObjectMapper mapper = new ObjectMapper();

Map<String, Object> map = new HashMap<>();
map.put("age", 25);
map.put("name", "yitian");
map.put("interests", new String[]{"pc games", "music"});

String text = mapper.writeValueAsString(map);
System.out.println(text);

Map<String, Object> map2 = mapper.readValue(text, new TypeReference<Map<String, Object>>(){});
System.out.println(map2);

//可以使用readTree方法直接读取JSON中的某个属性值
JsonNode root = mapper.readTree(text);
String name = root.get("name").asText();
int age = root.get("age").asInt();

System.out.println("name:" + name + " age:" + age);
```

程序结果如下。

```
{"name":"yitian","interests":["pc games","music"],"age":25}
{name=yitian, interests=[pc games, music], age=25}
name:yitian age:25
```

**Jackson配置：**

Jackson预定义了一些配置，我们通过启用和禁用某些属性可以修改Jackson运行的某些行为。详细文档参考[JacksonFeatures](https://github.com/FasterXML/jackson-databind/wiki/JacksonFeatures)。下面我简单翻译一下Jackson README上列出的一些属性。

```java
// 美化输出
mapper.enable(SerializationFeature.INDENT_OUTPUT);
// 允许序列化空的POJO类
// （否则会抛出异常）
mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
// 把java.util.Date, Calendar输出为数字（时间戳）
mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

// 在遇到未知属性的时候不抛出异常
mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
// 强制JSON 空字符串("")转换为null对象值:
mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

// 在JSON中允许C/C++ 样式的注释(非标准，默认禁用)
mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
// 允许没有引号的字段名（非标准）
mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
// 允许单引号（非标准）
mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
// 强制转义非ASCII字符
mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true);
// 将内容包裹为一个JSON属性，属性名由@JsonRootName注解指定
mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true);
```

这里有三个方法，configure方法接受配置名和要设置的值，Jackson 2.5版本新加的enable和disable方法则直接启用和禁用相应属性，我推荐使用后面两个方法。

Spring Boot对Jackson的支持非常完善，只要我们引入相应类库，Spring Boot就可以自动配置开箱即用的Bean。Spring自动配置的ObjectMapper（或者XmlMapper）作了如下配置，基本上可以适应大部分情况。

- 禁用了MapperFeature.DEFAULT_VIEW_INCLUSION
- 禁用了DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES 
- 禁用了SerializationFeature.WRITE_DATES_AS_TIMESTAMPS 