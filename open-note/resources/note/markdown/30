# 开源笔记

参考文章：https://blog.csdn.net/swordcenter/article/details/79279094 。

# JUnit介绍

JUnit是xUnit的子集之一，在C++、Python、Java语言中测试框架的名字都不相同。xUnit是一套基于测试驱动开发的测试框架。

其中的断言机制：将程序预期的结果与程序运行的最终结果进行对比确保对结果的可预知性。

# JUnit5

与以前版本的JUnit不同，JUnit由三个不同子项目中的几个不同模块组成。包括JUnit Platform、JUnit Jupiter、JUnit Vintage。下面分别介绍它们：

- **JUnit Platform**是基于JVM的运行测试的基础框架在，它定义了开发运行在这个测试框架上的TestEngine API。此外该平台提供了一个控制台启动器，可以从命令行启动平台，可以为Gradle和 Maven构建插件，同时提供基于JUnit 4的Runner。
- **JUnit Jupiter**是在JUnit 5中编写测试和扩展的新编程模型和扩展模型的组合.Jupiter子项目提供了一个TestEngine在平台上运行基于Jupiter的测试。
- **JUnit Vintage**提供了一个TestEngine在平台上运行基于JUnit 3和JUnit 4的测试。

引入依赖：

```xml
<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-api</artifactId>
    <version>5.7.0</version>
    <scope>test</scope>
</dependency>
```

编写单元测试：

```java
package xuegao.practice.scriptManager;

import org.junit.jupiter.api.Test;

public class MainTest {

    //测试使用JUnit5
    @Test
    void testUseJUnit5(){
		System.out.println("测试使用JUnit5");
    }
}
```

@Test注解在方法上标记方法为测试方法，以便构建工具和 IDE 能够识别并执行它们。==JUnit 5不再需要手动将测试类与测试方法为public，包可见的访问级别就足够了。==

初始化与销毁：

- 有时候会需要在测试方法初始化或销毁时，执行指定代码。在 JUnit 5 中，有4个注解可用于此需求：

  - @BeforeAll只执行一次，执行时机是在所有测试和@BeforeEach注解方法之前。
  - @BeforeEach在每个测试执行之前执行。
  - @AfterEach在每个测试执行之后执行。
  - @AfterAll只执行一次，执行时机是在所有测试和 @AfterEach 注解方法之后。

- 因为框架会为每个测试创建单独的实例，在 @BeforeAll或@AfterAll 方法执行时，尚无任何测试实例诞生。因此，这两个方法必须定义为静态方法。

  - ```java
    import org.junit.jupiter.api.*;
    
    class StandardTests {
    
        @BeforeAll
        static void initAll() {
        }
    
        @BeforeEach
        void init() {
        }
    
        @Test
        void succeedingTest() {
        }
    
        @Test
        void failingTest() {
            fail("a failing test");
        }
    
        @Test
        @Disabled("for demonstration purposes")
        void skippedTest() {
            // not executed
        }
    
        @AfterEach
        void tearDown() {
        }
    
        @AfterAll
        static void tearDownAll() {
        }
    }
    ```

断言：

- 准备好测试实例、执行了被测类的方法以后，断言能确保你得到了想要的结果。一般的断言，无非是检查一个实例的属性（比如，判空与判非空等），或者对两个实例进行比较（比如，检查两个实例对象是否相等）等。无论哪种检查，断言方法都可以接受一个字符串作为最后一个可选参数，它会在断言失败时提供必要的描述信息。如果提供出错信息的过程比较复杂，它也可以被包装在一个 lambda 表达式中，这样，只有到真正失败的时候，消息才会真正被构造出来。

- 下面是断言的使用方法Demo。

- ```java
  class AssertionsDemo {
  
      @Test
      void standardAssertions() {
          assertEquals(2, 2);
          assertEquals(4, 4, "The optional assertion message is now the last parameter.");
          assertTrue(2 == 2, () -> "Assertion messages can be lazily evaluated -- "
                  + "to avoid constructing complex messages unnecessarily.");
      }
  
      @Test
      void groupedAssertions() {
          // In a grouped assertion all assertions are executed, and any
          // failures will be reported together.
          assertAll("person",
              () -> assertEquals("John", person.getFirstName()),
              () -> assertEquals("Doe", person.getLastName())
          );
      }
  
      @Test
      void dependentAssertions() {
          // Within a code block, if an assertion fails the
          // subsequent code in the same block will be skipped.
          assertAll("properties",
              () -> {
                  String firstName = person.getFirstName();
                  assertNotNull(firstName);
  
                  // Executed only if the previous assertion is valid.
                  assertAll("first name",
                      () -> assertTrue(firstName.startsWith("J")),
                      () -> assertTrue(firstName.endsWith("n"))
                  );
              },
              () -> {
                  // Grouped assertion, so processed independently
                  // of results of first name assertions.
                  String lastName = person.getLastName();
                  assertNotNull(lastName);
  
                  // Executed only if the previous assertion is valid.
                  assertAll("last name",
                      () -> assertTrue(lastName.startsWith("D")),
                      () -> assertTrue(lastName.endsWith("e"))
                  );
              }
          );
      }
  
      @Test
      void exceptionTesting() {
          Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
              throw new IllegalArgumentException("a message");
          });
          assertEquals("a message", exception.getMessage());
      }
  
      @Test
      void timeoutNotExceeded() {
          // The following assertion succeeds.
          assertTimeout(ofMinutes(2), () -> {
              // Perform task that takes less than 2 minutes.
          });
      }
  
      @Test
      void timeoutNotExceededWithResult() {
          // The following assertion succeeds, and returns the supplied object.
          String actualResult = assertTimeout(ofMinutes(2), () -> {
              return "a result";
          });
          assertEquals("a result", actualResult);
      }
  
      @Test
      void timeoutNotExceededWithMethod() {
          // The following assertion invokes a method reference and returns an object.
          String actualGreeting = assertTimeout(ofMinutes(2), AssertionsDemo::greeting);
          assertEquals("hello world!", actualGreeting);
      }
  
      @Test
      void timeoutExceeded() {
          // The following assertion fails with an error message similar to:
          // execution exceeded timeout of 10 ms by 91 ms
          assertTimeout(ofMillis(10), () -> {
              // Simulate task that takes more than 10 ms.
              Thread.sleep(100);
          });
      }
  
      @Test
      void timeoutExceededWithPreemptiveTermination() {
          // The following assertion fails with an error message similar to:
          // execution timed out after 10 ms
          assertTimeoutPreemptively(ofMillis(10), () -> {
              // Simulate task that takes more than 10 ms.
              Thread.sleep(100);
          });
      }
  
      private static String greeting() {
          return "hello world!";
      }
  
  }
  ```

迁移指南：

- JUnit 平台可以通过 Jupiter 引擎来运行 JUnit 5 测试，Vintage 引擎来运行 JUnit 3 和 JUnit 4  测试。因此，已有的 JUnit 3 和 4 的测试不需要任何修改就可以直接在 JUnit 平台上运行。只需要确保 Vintage 引擎的 jar 包出现在 classpath 中，JUnit 平台会自动发现并使用该引擎来运行 JUnit 3 和 4  测试。开发人员可以按照自己的项目安排来规划迁移到 JUnit 5 的进度。可以保持已有的 JUnit 3 和 4  的测试用例不变，而新增加的测试用例则使用 JUnit 5。
- 在进行迁移的时候需要注意如下的变化：
  - 注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。
  - 把@Before 和@After 替换成@BeforeEach 和@AfterEach。
  - 把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。
  - 把@Ignore 替换成@Disabled。
  - 把@Category 替换成@Tag。
  - 把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。